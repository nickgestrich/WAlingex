---
title: "Make maps of loan words"
author:
  - Henning Schreiber:
      correspondence: "yes"
      email: janedoe@fosg.org
      orcid: 0000-0003-1689-0557
      institute: uhh
      
  - Nikolas Gestrich:
      institute: fi
      orcid: 0000-0003-1689-0558
 
institute:
  - uhh:
      name: UniversitÃ¤t Hamburg
      address: 23 Science Street, Eureka, Mississippi, USA
  - fi: Frobenius Institute
title-block-published: "Last updated"  
date: now
date-format: long
format: 
  docx:
    reference-doc: "../templates/template.docx" # Insert path for the DOCX file
execute:
  echo: true
  warning: false
  message: false
  comment: "#>"
  fig-path: "../figures/"
  fig-dpi: 600
filters:
  - ../templates/scholarly-metadata.lua
  - ../templates/author-info-blocks.lua
  - ../templates/pagebreak.lua
bibliography: references.bib
csl: "../templates/journal-of-archaeological-science.csl" # Insert path for the bib-style
abstract: |
  Text of abstract
keywords: |
  keyword 1; keyword 2; keyword 3
highlights: |
  These are the highlights. 
prefer-html: true
---

<!-- This is the format for text comments that will be ignored during renderings. Do not put R code in these comments because it will not be ignored. -->

<!-- With the following code you can access and display values from the yml header above. -->

Keywords: `r rmarkdown::metadata$keywords`

Highlights: `r rmarkdown::metadata$highlights`

<!-- The actual document text starts here: -->

In order to have location data, we read in the African languages, their glottoglog code, and their location from the glottolog database (@hammarstromGlottolog2024).

```{r}
#| label: get-data
#| eval: true
# Read data
langloc <- readr::read_csv(here::here('analysis/data/raw_data/glottologAfricanLanguages.csv')) |>
  
  #retain only relevant variables
  dplyr::select(glott_code, latitude, longitude, LanName) |> 
  
# drop languages with unknown location
  tidyr::drop_na(longitude) |> 

  # turn latitude and longitude columns into geometry
  sf::st_as_sf(coords = c("longitude","latitude"))

# set crs
sf::st_crs(langloc) <- 4326
```

Next, we read in the data and join the entries to the glottolog entries. Modify the list of .csv files to suit your interests. If you want to upload new files, place these in the directory /analysis/data/raw_data.Make sure any new data has a glottolog language code in a varaible named "glott_code"

```{r read data}
# read classified loan word data
# Create a vector of file paths
objs <- here::here("analysis", "data", "raw_data", c("gold.csv", 
                                                     "fonio.csv",
                                                     "millet.csv",
                                                     "salt.csv",
                                                     "iron.csv"))

# read the csv files into a list of data frames
data_list <- purrr::map(objs, readr::read_csv)

# Add the location data to the word lists

# Function to join location data to each data frame
join_geometry <- function(df) {
  df |> 
    dplyr::left_join(langloc, by = "glott_code") |> 
    sf::st_as_sf()  # Convert the result to an sf object if needed
}

# Apply the join function to each data frame in the list
data_list <- purrr::map(data_list, join_geometry)

# Assign names
names(data_list) <- c("gold", "fonio", "millet", "salt", "iron")
```

The data may contain certain duplicate entries. These need to be removed to avoid overly full plots. This is done by running the code below.

```{r clean duplicates}
# Function to remove duplicates
remove_duplicates <- function(df_list) {
  df_list <- lapply(df_list, function(df) {
    df <- df |> 
      dplyr::distinct(glott_code, form, .keep_all = TRUE)
    return(df)
  })
  return(df_list)
}

# Apply function
data_list <- remove_duplicates(data_list)
```

Classifications go into more detail than we need for plotting. We will only retain a rough classification here:

```{r}
data_list <- data_list |> 
  purrr::map(~ dplyr::mutate(.x, style = stringr::str_extract(style, "^[A-Za-z]")))
```

## Make interactive maps

Function to make interactive leaflet maps

```{r map function}
create_leaflet_map <- function(data_sf, form_column = "form", style_column = "style", background = "colour") {
  
  # Ensure the input data is an sf object and contains the required columns
  if (!inherits(data_sf, "sf")) {
    stop("The input data must be an sf object.")
  }
  if (!style_column %in% colnames(data_sf)) {
    stop(paste("The column", style_column, "is not found in the data."))
  }
  if (!"glott_code" %in% colnames(data_sf)) {
    stop("The column 'glott_code' is not found in the data.")
  }
  if (!"LanName" %in% colnames(data_sf)) {
    stop("The column 'LanName' is not found in the data.")
  }

  # Filter out rows with NA values in the "style" column
  data_sf <- data_sf |>
    dplyr::filter(!is.na(!!rlang::sym(style_column)))
  
  # Set the tile provider based on the 'background' argument
  tile_provider <- switch(
    background,
    "colour" = leaflet::providers$Esri.WorldPhysical,  # Default color tile
    "bw" = leaflet::providers$Esri.WorldGrayCanvas,    # Black-and-white tile
    stop("Invalid value for 'background'. Choose 'colour' or 'bw'.")
  )

  # Define a color palette for the "style" column (using Dark2 palette from RColorBrewer)
  color_pal <- leaflet::colorFactor(palette = RColorBrewer::brewer.pal(8, "Dark2"), domain = data_sf[[style_column]])

  # Add a new column with the corresponding colors based on the 'style' column
  data_sf <- data_sf |>
    dplyr::mutate(color = color_pal(!!rlang::sym(style_column)))  # Dynamically reference the column

  # Adjust overlapping points by slightly jittering their coordinates
  # Initially apply fixed jitter for the map creation
  jitter_scale <- 0.5000  # Set the base jitter scale factor

  data_sf <- data_sf |>
    dplyr::mutate(
      original_lon = sf::st_coordinates(geometry)[, 1],  # Store original longitude
      original_lat = sf::st_coordinates(geometry)[, 2],  # Store original latitude
      jittered_lon = original_lon + stats::rnorm(dplyr::n(), mean = 0, sd = jitter_scale),
      jittered_lat = original_lat + stats::rnorm(dplyr::n(), mean = 0, sd = jitter_scale)
    )

  # Create the leaflet map
  leaflet_map <- leaflet::leaflet(data_sf) |>
    leaflet::addProviderTiles(tile_provider) |>
    leaflet::addLabelOnlyMarkers(
      lng = ~jittered_lon,  # Use jittered longitude
      lat = ~jittered_lat,  # Use jittered latitude
      label = purrr::map(
        glue::glue("<span style='color:{data_sf$color}; font-weight: bold; font-size: 12px;'>{as.character(data_sf[[form_column]])}</span>"),
        htmltools::HTML
      ),
      labelOptions = leaflet::labelOptions(
        noHide = TRUE,
        direction = 'top',
        textOnly = TRUE
      )
    ) |>
    leaflet::addMarkers(
      lng = ~jittered_lon,
      lat = ~jittered_lat,
      popup = ~paste("<strong>Glottocode:</strong> ", glott_code, "<br><strong>Language Name:</strong> ", LanName),
      options = leaflet::markerOptions(opacity = 0)
    )

  # Add JavaScript to dynamically adjust jitter based on zoom level
  leaflet_map <- leaflet_map |>
    htmlwidgets::onRender(
      "
      function(el, map) {
        // Function to apply jitter based on zoom level
        function applyJitter() {
          var zoomLevel = map.getZoom();
          var jitterScale = 0.5 * Math.pow(20, -zoomLevel); // Increase jitter at lower zoom levels

          // Adjust the jitter of each marker
          map.eachLayer(function(layer) {
            if (layer instanceof L.Marker) {
              var originalLat = layer.options.originalLat;  // Access the original latitude
              var originalLng = layer.options.originalLng;  // Access the original longitude
              var newLat = originalLat + (Math.random() - 0.5) * jitterScale;
              var newLng = originalLng + (Math.random() - 0.5) * jitterScale;
              layer.setLatLng([newLat, newLng]);
            }
          });
        }

        // Apply jitter on map zoom change
        map.on('zoomend', function() {
          applyJitter();
        });

        // Apply jitter initially
        applyJitter();
      }
      ",
      list(
        originalLat = ~original_lat,
        originalLng = ~original_lon
      )
    )
  
  # Return the map object
  return(leaflet_map)
}
```

Function to save a version of every map in the list of data

```{r save function}
# Function to create and save leaflet maps for all data frames in data_list
save_maps <- function(data_list, form_column = "form", background = "colour") {
  
  # Use purrr::map2 to iterate over the list of data frames and generate maps
  purrr::map2(data_list, seq_along(data_list), ~ {
    # Create the map using the create_leaflet_map function
    map <- create_leaflet_map(.x, form_column, background)
    
    # Generate the filename based on the index or data frame name
    filename <- paste0("map_", .y, ".html")
    
    # Save the map as an HTML file in the 'analysis/figures' folder
    htmlwidgets::saveWidget(map, here::here("analysis/figures", filename))
  })
}
```

```{r}
#| label: fonio
#| fig-cap: "fonio word forms"
 create_leaflet_map(data_list$iron, background = "bw")
```

Save an html version of all objects

```{r}
#| label: save-maps
#| eval: false
save_maps(data_list)
```

## Make static maps (for printing etc)

Function to make static plots

```{r}
create_static_map <- function(data_sf, form_column = "form", style_column = "style", plot_title = NULL) {

  # Ensure the input data is an sf object and contains the required columns
  if (!inherits(data_sf, "sf")) {
    stop("The input data must be an sf object.")
  }
  if (!style_column %in% colnames(data_sf)) {
    stop(paste("The column", style_column, "is not found in the data."))
  }
  if (!"glott_code" %in% colnames(data_sf)) {
    stop("The column 'glott_code' is not found in the data.")
  }
  if (!"LanName" %in% colnames(data_sf)) {
    stop("The column 'LanName' is not found in the data.")
  }

  # Filter out rows with NA values in the "style" column
  data_sf <- data_sf |> dplyr::filter(!is.na(!!rlang::sym(style_column)))

  # Define the color palette for the "style" column, ensuring darker colors
  num_categories <- length(unique(data_sf[[style_column]]))
  dark_palette <- scales::brewer_pal(palette = "Dark2")(num_categories)

  # Create the base map with background
  base_map <- ggplot2::ggplot() +
    ggspatial::annotation_map_tile(tiles = "http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/${z}/${y}/${x}") +
    ggplot2::geom_sf(data = data_sf, ggplot2::aes(color = !!rlang::sym(style_column)), show.legend = FALSE) +
    ggplot2::scale_color_manual(values = dark_palette) +
    ggplot2::theme_minimal() +
    ggplot2::theme(legend.position = "bottom") +
    ggplot2::labs(color = style_column)

  # Add the plot title if provided
  if (!is.null(plot_title)) {
    base_map <- base_map + ggplot2::ggtitle(plot_title)
  }

  # Crop the extent of the map to the data layers' extent
  base_map <- base_map + ggplot2::coord_sf(xlim = sf::st_bbox(data_sf)[c("xmin", "xmax")],
                                           ylim = sf::st_bbox(data_sf)[c("ymin", "ymax")])

  # Plot the data as strings contained in the form_column variable
  map_plot <- base_map +
    ggplot2::geom_text(data = data_sf, ggplot2::aes(x = sf::st_coordinates(data_sf)[,1],
                                                    y = sf::st_coordinates(data_sf)[,2],
                                                    label = !!rlang::sym(form_column),
                                                    color = !!rlang::sym(style_column)),
                       position = ggplot2::position_jitter(width = 0.1, height = 0.1), size = 3)

  # Return the ggplot object
  return(map_plot)
}
```

Make static plots

```{r}
create_static_map(data_list[[2]], plot_title = "fonio")
```

```{r}
create_static_map_tmap <- function(data_sf, form_column = "form", style_column = "style", plot_title = NULL) {
  
  # Ensure the input data is an sf object and contains the required columns
  if (!inherits(data_sf, "sf")) {
    stop("The input data must be an sf object.")
  }
  if (!style_column %in% colnames(data_sf)) {
    stop(paste("The column", style_column, "is not found in the data."))
  }
  if (!"glott_code" %in% colnames(data_sf)) {
    stop("The column 'glott_code' is not found in the data.")
  }
  if (!"LanName" %in% colnames(data_sf)) {
    stop("The column 'LanName' is not found in the data.")
  }

  # Filter out rows with NA values in the "style" column
  data_sf <- data_sf |> dplyr::filter(!is.na(!!rlang::sym(style_column)))
  
  # Define the color palette for the "style" column, ensuring darker colors
  num_categories <- length(unique(data_sf[[style_column]]))
  dark_palette <- scales::brewer_pal(palette = "Dark2")(num_categories)
  
  # Get the background map using maptiles package
  background_map <- maptiles::get_tiles(data_sf, provider = "Esri.WorldGrayCanvas", crop = TRUE)
  
  # Increase the boundaries of the plot
  bbox <- sf::st_bbox(data_sf)
  x_range <- bbox["xmax"] - bbox["xmin"]
  y_range <- bbox["ymax"] - bbox["ymin"]
  bbox["xmin"] <- bbox["xmin"] - 50 * x_range
  bbox["xmax"] <- bbox["xmax"] + 50 * x_range
  bbox["ymin"] <- bbox["ymin"] - 50 * y_range
  bbox["ymax"] <- bbox["ymax"] + 50 * y_range
  
  # Create the tmap object
  tmap::tmap_mode("plot")
  map_plot <- tmap::tm_shape(background_map) +
    tmap::tm_rgb() +
    tmap::tm_shape(data_sf) +
    tmap::tm_text(text = form_column, col = style_column, palette = dark_palette) +
    tmap::tm_layout(title = plot_title, legend.show = FALSE, bbox = bbox)
  
  # Return the tmap object
  return(map_plot)
}
```

```{r}
create_static_map_tmap(data_list[[1]])
```

## Make a network

Our network will be made using languages as nodes, which come with locations. We will then use the data in the list to create edges between the nodes.

```{r}
# Load necessary libraries
library(dplyr)
library(tidyr)



# Function to create edge list for a dataframe
create_edge_list <- function(df, df_name) {
  # Clean and transform the data
  df <- df |> 
    select(glott_code, style) |> 
    as_tibble()
  
  # Create edge list based on first letter of style
  edge_list_first_letter <- df |>
    mutate(first_letter = substr(style, 1, 1)) |>
    inner_join(., ., by = "first_letter") |>
    filter(glott_code.x != glott_code.y) |>
    select(glott_code.x, glott_code.y) |>
    distinct() |>
    mutate(type = df_name)
  
  # Create edge list based on first three characters of style
  edge_list_first_three <- df |>
    mutate(first_three = substr(style, 1, 3)) |>
    inner_join(., ., by = "first_three") |>
    filter(glott_code.x != glott_code.y) |>
    select(glott_code.x, glott_code.y) |>
    distinct() |>
    mutate(type = df_name)
  
  # Combine both edge lists
  combined_edge_list <- bind_rows(edge_list_first_letter, edge_list_first_three) |>
    distinct()
  
  return(combined_edge_list)
}

# Apply function to all dataframes in the list and combine results
all_edge_lists <- bind_rows(
  lapply(names(data_list), function(df_name) {
    create_edge_list(data_list[[df_name]], df_name)
  })
)


```

```{r}
# Load necessary libraries
library(dplyr)
library(tidyr)

# Subset the data
data_list_2 <- purrr::map(data_list, ~ {
  # Select the columns glott_code and style and convert to tibble
selected_df <- .x %>%
    as_tibble() %>%   # Convert to tibble
    select(glott_code, style) %>% # Select the relevant columns
    drop_na(style)
  
  
  return(selected_df)
})
```

```{r}

# Function to create edge list for a dataframe
create_edge_list <- function(df, df_name) {
  # Create edge list based on first letter of style
  df_first_letter <- df |>
    mutate(first_letter = substr(style, 1, 1))
  edge_list_first_letter <- df_first_letter |>
    inner_join(df_first_letter, by = "first_letter") |>
    filter(glott_code.x != glott_code.y) |>
    select(glott_code.x, glott_code.y) |>
    distinct() |>
    mutate(type = df_name, weight = 1)
  
  # Create edge list based on first three characters of style
  df_first_three <- df |>
    mutate(first_three = substr(style, 1, 3))
  edge_list_first_three <- df_first_three |>
    inner_join(df_first_three, by = "first_three") |>
    filter(glott_code.x != glott_code.y) |>
    select(glott_code.x, glott_code.y) |>
    distinct() |>
    mutate(type = df_name, weight = 1)
  
  # Combine both edge lists
  combined_edge_list <- bind_rows(edge_list_first_letter, edge_list_first_three) |>
    distinct()
  
  return(combined_edge_list)
}

# Apply function to all dataframes in the list and combine results
all_edge_lists <- bind_rows(
  lapply(names(data_list_2), function(df_name) {
    create_edge_list(data_list_2[[df_name]], df_name)
  })
)

# Summarize duplicates and calculate the weight
all_edge_lists_summarized <- all_edge_lists |>
  group_by(glott_code.x, glott_code.y, type) |>
  summarize(weight = sum(weight), .groups = 'drop')
```

Now, add the edge list and the node list to a tidygraph network

```{r}
library(tidygraph)

g <- tbl_graph(edges = all_edge_lists_summarized, directed = FALSE)

plot(g)
```

<!-- The following line inserts a page break  -->

\newpage

# References

<!-- The following line ensures the references appear here for the MS Word or HTML output files, rather than right at the end of the document (this will not work for PDF files):  -->

::: {#refs}
:::

\newpage

### Colophon

This report was generated on `r Sys.time()` using the following computational environment and dependencies:

```{r}
#| label: colophon
#| cache: false

# which R packages and versions?
if ("devtools" %in% installed.packages()) devtools::session_info()
```

The current Git commit details are:

```{r}
# what commit is this file at? 
if ("git2r" %in% installed.packages() & git2r::in_repository(path = ".")) git2r::repository(here::here())  
```
