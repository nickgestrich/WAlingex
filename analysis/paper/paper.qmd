---
title: "Loan word maps"
author:
  - Henning Schreiber:
      correspondence: "yes"
      email: janedoe@fosg.org
      orcid: 0000-0003-1689-0557
      institute:
        - uhh
  - Nikolas Gestrich:
      institute: fi
      orcid: 0000-0003-1689-0558
 
institute:
  - uhh:
      name: UniversitÃ¤t Hamburg
      address: 23 Science Street, Eureka, Mississippi, USA
  - fi: Frobenius Institute
title-block-published: "Last updated"  
date: now
date-format: long
format: 
  docx:
    reference-doc: "../templates/template.docx" # Insert path for the DOCX file
execute:
  echo: true
  warning: false
  message: false
  comment: "#>"
  fig-path: "../figures/"
  fig-dpi: 600
filters:
  - ../templates/scholarly-metadata.lua
  - ../templates/author-info-blocks.lua
  - ../templates/pagebreak.lua
bibliography: references.bib
csl: "../templates/journal-of-archaeological-science.csl" # Insert path for the bib-style
abstract: |
  Text of abstract
keywords: |
  keyword 1; keyword 2; keyword 3
highlights: |
  These are the highlights. 
---

<!-- This is the format for text comments that will be ignored during renderings. Do not put R code in these comments because it will not be ignored. -->

<!-- With the following code you can access and display values from the yml header above. -->

Keywords: `r rmarkdown::metadata$keywords`

Highlights: `r rmarkdown::metadata$highlights`

<!-- The actual document text starts here: -->

# Creating language maps

Read location data from glottolog and Sahelia databases

```{r}
#| label: get-data
#| eval: false
# Read data
langloc <- readr::read_csv(here::here('analysis/data/raw_data/glottologAfricanLanguages.csv')) |>
  
  #retain only relevant variables
  dplyr::select(glott_code, latitude, longitude, LanName) |> 
  
# drop languages with unknown location
  tidyr::drop_na(longitude) |> 

  # turn latitude and longitude columns into geometry
  sf::st_as_sf(coords = c("longitude","latitude"))

# set crs
sf::st_crs(langloc) <- 4326
```

```{r}
# read classified loan word data
# Create a vector of file paths
objs <- here::here("analysis", "data", "raw_data", c("gold.csv", 
                                                     "fonio.csv",
                                                     "millet.csv",
                                                     "salt.csv",
                                                     "iron.csv"))

# read the csv files into a list of data frames
data_list <- purrr::map(objs, readr::read_csv)

# Add the location data to the word lists

# Function to join location data to each data frame
join_geometry <- function(df) {
  df |> 
    dplyr::left_join(langloc, by = "glott_code") |> 
    sf::st_as_sf()  # Convert the result to an sf object if needed
}

# Apply the join function to each data frame in the list
data_list <- purrr::map(data_list, join_geometry)
```

Function to make interactive leaflet maps
```{r}
create_leaflet_map <- function(data_sf, form_column = "form", background = "colour") {
  
  # Ensure the input data is an sf object and contains the 'form' column
  if (!inherits(data_sf, "sf")) {
    stop("The input data must be an sf object.")
  }
  if (!form_column %in% colnames(data_sf)) {
    stop(paste("The column", form_column, "is not found in the data."))
  }
  
  # Filter out rows with NA values in the "form" column
  data_sf <- data_sf |>
    dplyr::filter(!is.na(!!rlang::sym(form_column)))
  
  # Set the tile provider based on the 'background' argument
  tile_provider <- switch(
    background,
    "colour" = leaflet::providers$Esri.WorldPhysical,  # Default color tile
    "bw" = leaflet::providers$Esri.WorldGrayCanvas,    # Black-and-white tile
    stop("Invalid value for 'background'. Choose 'colour' or 'bw'.")
  )

  # Define a color palette for the "form" column (using Set3 palette)
  color_pal <- leaflet::colorFactor(palette = "Set3", domain = data_sf[[form_column]])

  # Add a new column with the corresponding colors based on the 'form' column
  data_sf <- data_sf |>
    dplyr::mutate(color = color_pal(!!rlang::sym(form_column)))  # Dynamically reference the column

  # Adjust overlapping points by slightly jittering their coordinates
  # Initially apply fixed jitter for the map creation
  jitter_scale <- 0.1000  # Set the base jitter scale factor

  data_sf <- data_sf |>
    dplyr::mutate(
      # Apply a small random jitter to coordinates for initial display
      jittered_lon = sf::st_coordinates(geometry)[, 1] + stats::rnorm(dplyr::n(), mean = 0, sd = jitter_scale),
      jittered_lat = sf::st_coordinates(geometry)[, 2] + stats::rnorm(dplyr::n(), mean = 0, sd = jitter_scale)
    )

  # Create the leaflet map
  leaflet_map <- leaflet::leaflet(data_sf) |>
    leaflet::addProviderTiles(tile_provider) |>
    leaflet::addLabelOnlyMarkers(
      lng = ~jittered_lon,  # Use jittered longitude
      lat = ~jittered_lat,  # Use jittered latitude
      label = purrr::map(
        glue::glue("<span style='color:{data_sf$color}; font-weight: bold; font-size: 12px;'>{as.character(data_sf[[form_column]])}</span>"),
        htmltools::HTML
      ),
      labelOptions = leaflet::labelOptions(
        noHide = TRUE,
        direction = 'top',
        textOnly = TRUE
      )
    )

  # Add JavaScript to dynamically adjust jitter based on zoom level
  leaflet_map <- leaflet_map |>
    htmlwidgets::onRender(
      "
      function(el, map) {
        // Function to apply jitter based on zoom level
        function applyJitter() {
          var zoomLevel = map.getZoom();
          var jitterScale = 0.1 * Math.pow(1.7, zoomLevel); // Adjust jitter with zoom level

          // Adjust the jitter of each marker
          map.eachLayer(function(layer) {
            if (layer instanceof L.Marker) {
              var latLng = layer.getLatLng();
              var newLat = latLng.lat + (Math.random() - 0.5) * jitterScale;
              var newLng = latLng.lng + (Math.random() - 0.5) * jitterScale;
              layer.setLatLng([newLat, newLng]);
            }
          });
        }

        // Apply jitter on map zoom change
        map.on('zoomend', function() {
          applyJitter();
        });

        // Apply jitter initially
        applyJitter();
      }
      "
    )
  
  # Return the map object
  return(leaflet_map)
}
```


Function to save a version of every map in the list of data
```{r}
# Function to create and save leaflet maps for all data frames in data_list
save_maps <- function(data_list, form_column = "form", background = "colour") {
  
  # Use purrr::map2 to iterate over the list of data frames and generate maps
  purrr::map2(data_list, seq_along(data_list), ~ {
    # Create the map using the create_leaflet_map function
    map <- create_leaflet_map(.x, form_column, background)
    
    # Generate the filename based on the index or data frame name
    filename <- paste0("map_", .y, ".html")
    
    # Save the map as an HTML file in the 'analysis/figures' folder
    htmlwidgets::saveWidget(map, here::here("analysis/figures", filename))
  })
}
```

Save an html version of all objects
```{r}
save_maps(data_list, background = "bw")
```



```{r}
library(dplyr)
library(stringr)
library(sf)
library(readr)
library(leaflet)
library(purrr)
library(glue)
library(htmltools)

# 3. Load classified language data and plot

# Load data
gold <- read_csv("gold.csv") %>%

  # Modify the "lang" column to keep only the first expression and remove the number behind it
  mutate(lang = str_trim(str_extract(lang, "^[^ ]+"))) %>%

  # Join the langloc dataset with the gold dataset
  inner_join(langloc, by = c("lang" = "lang_code")) %>%

  # Exclude rows where the "form" variable contains NA values
  filter(!is.na(form))

# 4. Plot on an interactive leaflet map
# Define a color palette for the "form" column
color_pal <- colorFactor(palette = "Set3", domain = gold$form)

# Add a new column with the corresponding colors
gold <- gold %>%
  mutate(color = color_pal(form))

# Create the leaflet map
leaflet(gold) %>%
  addProviderTiles(providers$Esri.WorldPhysical) %>%
  addLabelOnlyMarkers(
    lng = ~st_coordinates(geometry)[,1],
    lat = ~st_coordinates(geometry)[,2],
    label = purrr::map(
      glue::glue("<span style='color:{gold$color}; font-weight: bold; font-size: 12px;'>{as.character(gold$form)}</span>"),
      htmltools::HTML
    ),
    labelOptions = labelOptions(
      noHide = TRUE,
      direction = 'top',
      textOnly = TRUE
    )
  )


## NEXT: run this for a list of files and output a html file leaflet map for each.

```



Merge using two columns

```{r}
# Perform the first join on the primary id1
merged_data <- data1 %>%
  left_join(data2, by = c("id1" = "id"))

# For the rows where the primary ID did not match, perform a second join on id2
final_data <- merged_data %>%
  mutate(id2 = ifelse(is.na(x), id2, NA)) %>%   # Set id2 as NA if the primary join succeeded
  left_join(data2, by = c("id2" = "id")) %>%
  select(-id2)  # Drop the temporary id2 column
```




```{r}
#| label: fig-demo-plot
#| fig-cap: "A plot of random numbers"
plot(rnorm(10))
```

@fig-demo-plot shows how we can have a caption and cross-reference for a plot. Note that figure label and cross-references must both be prefixed with `fig-`

```{r}
#| label: demo-inline-code
#| echo: false
x <- round(pi, 2)
```

Here is an example of inline code `r x` in the middle of a sentence.

# Discussion

# Conclusion

# Acknowledgements

<!-- The following line inserts a page break  -->

\newpage

# References

<!-- The following line ensures the references appear here for the MS Word or HTML output files, rather than right at the end of the document (this will not work for PDF files):  -->

::: {#refs}
:::

\newpage

### Colophon

This report was generated on `r Sys.time()` using the following computational environment and dependencies:

```{r}
#| label: colophon
#| cache: false

# which R packages and versions?
if ("devtools" %in% installed.packages()) devtools::session_info()
```

The current Git commit details are:

```{r}
# what commit is this file at? 
if ("git2r" %in% installed.packages() & git2r::in_repository(path = ".")) git2r::repository(here::here())  
```
