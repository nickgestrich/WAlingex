---
title: "Make interactive loan word maps"
author:
  - Henning Schreiber:
      orcid: 0000-0001-9576-8036
      institute: uhh
      
  - Nikolas Gestrich:
      correspondence: "yes"
      email: gestrich@uni-frankfurt.de
      institute: fi
      orcid: 0000-0001-6376-1972
 
institute:
  - uhh:
      name: Asien-Afrika-Institut, UniversitÃ¤t Hamburg
      address: Mittelweg 177, 20148 Hamburg
  - fi: 
      name: Frobenius Institute
      address: Norbert-Wollheim-Platz 1, 60323 Frankfurt am Main, Gemany
title-block-published: "Last updated"  
date: now
date-format: long
format: 
  docx:
    reference-doc: "../templates/template.docx" # Insert path for the DOCX file
execute:
  echo: true
  warning: false
  message: false
  comment: "#>"
  fig-path: "../figures/"
  fig-dpi: 600
filters:
  - ../templates/scholarly-metadata.lua
  - ../templates/author-info-blocks.lua
  - ../templates/pagebreak.lua
bibliography: references.bib
csl: "../templates/journal-of-archaeological-science.csl" # Insert path for the bib-style
abstract: |
  Text of abstract
keywords: |
  West Africa; trade; historical linguistics
highlights: |
  Maps of loanwords to illustrate historical trade pattern in West Africa
prefer-html: true
---

<!-- This is the format for text comments that will be ignored during renderings. Do not put R code in these comments because it will not be ignored. -->

<!-- With the following code you can access and display values from the yml header above. -->

Keywords: `r rmarkdown::metadata$keywords`

Highlights: `r rmarkdown::metadata$highlights`

<!-- The actual document text starts here: -->

## Retrieve and clean data

In order to have location data, we read in the African languages, their glottoglog code, and their location from the glottolog database (@hammarstromGlottolog2024).

```{r}
#| label: get-data
#| eval: true
# Read data
langloc <- readr::read_csv(here::here('analysis/data/raw_data/glottologAfricanLanguages.csv')) |>
  
  #retain only relevant variables
  dplyr::select(glott_code, latitude, longitude, LanName) |> 
  
# drop languages with unknown location
  tidyr::drop_na(longitude) |> 

  # turn latitude and longitude columns into geometry
  sf::st_as_sf(coords = c("longitude","latitude"))

# set crs
sf::st_crs(langloc) <- 4326
```

Next, we read in the data and join the entries to the glottolog entries. Modify the list of .csv files to suit your interests. If you want to upload new files, place these in the directory /analysis/data/raw_data.Make sure any new data has a glottolog language code in a variable named "glott_code"

```{r read data}
# read classified loan word data
# Create a vector of file paths
objs <- here::here("analysis", "data", "raw_data", c("gold.csv", 
                                                     "fonio.csv",
                                                     "millet.csv",
                                                     "salt.csv",
                                                     "iron.csv"))

# read the csv files into a list of data frames
data_list <- purrr::map(objs, readr::read_csv)

# Add the location data to the word lists

# Function to join location data to each data frame
join_geometry <- function(df) {
  df |> 
    dplyr::left_join(langloc, by = "glott_code") |> 
    sf::st_as_sf()  # Convert the result to an sf object if needed
}

# Apply the join function to each data frame in the list
data_list <- purrr::map(data_list, join_geometry)

# Assign names
names(data_list) <- c("gold", "fonio", "millet", "salt", "iron")
```

The data may contain certain duplicate entries. These need to be removed to avoid overly full plots. This is done by running the code below.

```{r clean duplicates}
# Function to remove duplicates
remove_duplicates <- function(df_list) {
  df_list <- lapply(df_list, function(df) {
    df <- df |> 
      dplyr::distinct(glott_code, style, .keep_all = TRUE)
    return(df)
  })
  return(df_list)
}

# Apply function
data_list <- remove_duplicates(data_list)
```

Classifications go into more detail than we need for plotting. We will only retain a rough classification here:

```{r}
data_list <- data_list |> 
  purrr::map(~ dplyr::mutate(.x, style = stringr::str_extract(style, "^[A-Za-z]")))
```

We need to standardise the "form" column to be lowercase

```{r}
data_list <- purrr::map(data_list, ~ {
  .x |> 
    dplyr::mutate(dplyr::across(.cols = starts_with("form"), ~ tolower(.)))
})
```


## Make interactive maps

Function to make interactive leaflet maps

```{r map function}
create_leaflet_map <- function(data_sf, form_column = "form", style_column = "style", background = "colour") {
  
  # Ensure the input data is an sf object and contains the required columns
  if (!inherits(data_sf, "sf")) {
    stop("The input data must be an sf object.")
  }
  if (!style_column %in% colnames(data_sf)) {
    stop(paste("The column", style_column, "is not found in the data."))
  }
  if (!"glott_code" %in% colnames(data_sf)) {
    stop("The column 'glott_code' is not found in the data.")
  }
  if (!"LanName" %in% colnames(data_sf)) {
    stop("The column 'LanName' is not found in the data.")
  }

  # Filter out rows with NA values in the "style" column
  data_sf <- data_sf |>
    dplyr::filter(!is.na(!!rlang::sym(style_column)))
  
  # Set the tile provider based on the 'background' argument
  tile_provider <- switch(
    background,
    "colour" = leaflet::providers$Esri.WorldPhysical,  # Default color tile
    "bw" = leaflet::providers$Esri.WorldGrayCanvas,    # Black-and-white tile
    stop("Invalid value for 'background'. Choose 'colour' or 'bw'.")
  )

  # Define a color palette for the "style" column (using Dark2 palette from RColorBrewer)
  color_pal <- leaflet::colorFactor(palette = RColorBrewer::brewer.pal(8, "Dark2"), domain = data_sf[[style_column]])

  # Add a new column with the corresponding colors based on the 'style' column
  data_sf <- data_sf |>
    dplyr::mutate(color = color_pal(!!rlang::sym(style_column)))  # Dynamically reference the column

  # Adjust overlapping points by slightly jittering their coordinates
  # Initially apply fixed jitter for the map creation
  jitter_scale <- 0.5000  # Set the base jitter scale factor

  data_sf <- data_sf |>
    dplyr::mutate(
      original_lon = sf::st_coordinates(geometry)[, 1],  # Store original longitude
      original_lat = sf::st_coordinates(geometry)[, 2],  # Store original latitude
      jittered_lon = original_lon + stats::rnorm(dplyr::n(), mean = 0, sd = jitter_scale),
      jittered_lat = original_lat + stats::rnorm(dplyr::n(), mean = 0, sd = jitter_scale)
    )

  # Create the leaflet map
  leaflet_map <- leaflet::leaflet(data_sf) |>
    leaflet::addProviderTiles(tile_provider) |>
    leaflet::addLabelOnlyMarkers(
      lng = ~jittered_lon,  # Use jittered longitude
      lat = ~jittered_lat,  # Use jittered latitude
      label = purrr::map(
        glue::glue("<span style='color:{data_sf$color}; font-weight: bold; font-size: 12px;'>{as.character(data_sf[[form_column]])}</span>"),
        htmltools::HTML
      ),
      labelOptions = leaflet::labelOptions(
        noHide = TRUE,
        direction = 'top',
        textOnly = TRUE
      )
    ) |>
    leaflet::addMarkers(
      lng = ~jittered_lon,
      lat = ~jittered_lat,
      popup = ~paste("<strong>Glottocode:</strong> ", glott_code, "<br><strong>Language Name:</strong> ", LanName),
      options = leaflet::markerOptions(opacity = 0)
    )

  # Add JavaScript to dynamically adjust jitter based on zoom level
  leaflet_map <- leaflet_map |>
    htmlwidgets::onRender(
      "
      function(el, map) {
        // Function to apply jitter based on zoom level
        function applyJitter() {
          var zoomLevel = map.getZoom();
          var jitterScale = 0.5 * Math.pow(20, -zoomLevel); // Increase jitter at lower zoom levels

          // Adjust the jitter of each marker
          map.eachLayer(function(layer) {
            if (layer instanceof L.Marker) {
              var originalLat = layer.options.originalLat;  // Access the original latitude
              var originalLng = layer.options.originalLng;  // Access the original longitude
              var newLat = originalLat + (Math.random() - 0.5) * jitterScale;
              var newLng = originalLng + (Math.random() - 0.5) * jitterScale;
              layer.setLatLng([newLat, newLng]);
            }
          });
        }

        // Apply jitter on map zoom change
        map.on('zoomend', function() {
          applyJitter();
        });

        // Apply jitter initially
        applyJitter();
      }
      ",
      list(
        originalLat = ~original_lat,
        originalLng = ~original_lon
      )
    )
  
  # Return the map object
  return(leaflet_map)
}
```

Function to save a version of every map in the list of data

```{r save function}
# Function to create and save leaflet maps for all data frames in data_list
save_maps <- function(data_list, form_column = "form", background = "colour") {
  
  # Use purrr::map2 to iterate over the list of data frames and generate maps
  purrr::map2(data_list, seq_along(data_list), ~ {
    # Create the map using the create_leaflet_map function
    map <- create_leaflet_map(.x, form_column, background)
    
    # Generate the filename based on the index or data frame name
    filename <- paste0("map_", .y, ".html")
    
    # Save the map as an HTML file in the 'analysis/figures' folder
    htmlwidgets::saveWidget(map, here::here("analysis/figures", filename))
  })
}
```

```{r}
#| label: fonio
#| fig-cap: "fonio word forms"

 # create_leaflet_map(data_list$iron, background = "colour") #uncomment line to run
```

Save an html version of all objects

```{r}
#| label: save-maps
#| eval: false

 save_maps(data_list, background = "colour")  #uncomment to run

```

### Add further layers to the map

Get the archaeological data layers

```{r}
# Create a vector of file paths
points <- here::here("analysis", "data", "raw_data", c("gold_points.csv", 
                                                     "fonio_points.csv",
                                                     "millet_points.csv",
                                                     "salt_points.csv",
                                                     "iron_points.csv"))

# read the csv files into a list of data frames
point_list <- purrr::map(points, readr::read_csv2)

# make sf geometry
points_sf <- point_list[[1]] |> sf::st_as_sf(coords = c("lon","lat"))

# set crs
sf::st_crs(points_sf) <- 4326
```

function to add further layers

```{r}
add_sf_to_leaflet_map <- function(leaflet_map, new_data_sf, label_column) {
  
  # Ensure the new input data is an sf object and contains the required columns
  if (!inherits(new_data_sf, "sf")) {
    stop("The new input data must be an sf object.")
  }
  if (!label_column %in% colnames(new_data_sf)) {
    stop(paste("The column", label_column, "is not found in the new data."))
  }
  
  # Define a color for the new points
  new_point_color <- "black"  
  
  # Add the new sf object as a point layer to the existing leaflet map
  leaflet_map <- leaflet_map |>
    leaflet::addCircleMarkers(
      data = new_data_sf,
      lng = ~sf::st_coordinates(geometry)[, 1],
      lat = ~sf::st_coordinates(geometry)[, 2],
      color = new_point_color,
      radius = 2,
      stroke = FALSE, fillOpacity = 1,
      label = purrr::map(
        glue::glue("<span style='color:{new_point_color}; font-weight: normal; font-size: 10px;'>{as.character(new_data_sf[[label_column]])}</span>"),
        htmltools::HTML
      ),
      labelOptions = leaflet::labelOptions(
        noHide = TRUE,
        direction = 'top',
        textOnly = TRUE
      )
    )
  
  # Return the updated map object
  return(leaflet_map)
}
```

```{r}
#run mapping function
#create_leaflet_map(data_list$gold, background = "bw") |> #uncomment to run

#add point layer
#add_sf_to_leaflet_map(points_sf, label_column = "site") #uncomment to run
```

## Make static maps

```{r}
library(rnaturalearth)
library(rnaturalearthdata)

# Load coastline and river data
coastline <- ne_coastline(scale = "medium", returnclass = "sf")
rivers <- ne_download(scale = "medium", type = "rivers_lake_centerlines", category = "physical", returnclass = "sf")
```

```{r}
plot_language_map <- function(data, coastline, rivers, bbox_padding = 0.1) {
  # Ensure consistent CRS across all inputs
  common_crs <- sf::st_crs(coastline)  # Use the CRS of the coastline as reference
  data <- sf::st_transform(data, crs = common_crs)
  rivers <- sf::st_transform(rivers, crs = common_crs)

  # Compute the bounding box of the data points
  bbox <- sf::st_bbox(data)
  # Extract numeric values for xmin, xmax, ymin, ymax to ensure clean handling
  bbox_xmin <- as.numeric(bbox["xmin"])
  bbox_xmax <- as.numeric(bbox["xmax"])
  bbox_ymin <- as.numeric(bbox["ymin"])
  bbox_ymax <- as.numeric(bbox["ymax"])

  # Compute expanded bounding box
  expanded_bbox <- sf::st_bbox(
    c(
      xmin = bbox_xmin - bbox_padding * (bbox_xmax - bbox_xmin),
      xmax = bbox_xmax + bbox_padding * (bbox_xmax - bbox_xmin),
      ymin = bbox_ymin - bbox_padding * (bbox_ymax - bbox_ymin),
      ymax = bbox_ymax + bbox_padding * (bbox_ymax - bbox_ymin)
    ),
    crs = sf::st_crs(data)  # Use CRS from input data
  )
  # Convert bbox to polygon as sf object
  expanded_bbox_sf <- sf::st_as_sfc(expanded_bbox)

  # Crop coastline and rivers to match the bounding box
  coastline_cropped <- sf::st_intersection(coastline, expanded_bbox_sf)
  rivers_cropped <- sf::st_intersection(rivers, expanded_bbox_sf)

  # Extract coordinates and drop geometry
  data <- data |>
    dplyr::mutate(
      lon = sf::st_coordinates(geometry)[, 1],
      lat = sf::st_coordinates(geometry)[, 2]
    ) |>
    sf::st_drop_geometry()

  # Count occurrences of each category and order
  category_order <- data |>
    dplyr::count(style, name = "freq") |>
    dplyr::arrange(dplyr::desc(freq)) |>
    dplyr::mutate(color = dplyr::case_when(
      dplyr::row_number() <= 12 ~ rcartocolor::carto_pal(n = 12, name = "Bold")[dplyr::row_number()], 
      TRUE ~ "#3b3b3b"
    ))

  # Merge color mapping back to the data
  data <- dplyr::left_join(data, category_order, by = "style")

  # Plot the map
  ggplot2::ggplot() +
    ggplot2::geom_sf(data = coastline_cropped, color = "black", linewidth = 0.5) +  # Cropped coastline
    ggplot2::geom_sf(data = rivers_cropped, color = "gray", linewidth = 0.3) +      # Cropped rivers
    ggplot2::geom_text(
      data = data,
      ggplot2::aes(x = lon, y = lat, label = form, color = style),
      position = ggplot2::position_jitter(width = 1.5, height = 1.5), 
      size = 3
    ) +  # Labels with jitter
    ggplot2::scale_color_manual(values = setNames(category_order$color, category_order$style)) +  # Custom palette with dark gray fallback
    ggplot2::coord_sf(
      xlim = c(expanded_bbox["xmin"], expanded_bbox["xmax"]),
      ylim = c(expanded_bbox["ymin"], expanded_bbox["ymax"]),
      expand = FALSE
    ) +  # Map extent controlled by `expanded_bbox`
    ggplot2::theme_void() +
    ggplot2::theme(legend.position = "none")
}
```

```{r}
plots <- purrr::map(data_list, ~plot_language_map(.x, coastline, rivers, bbox_padding = 0.15))
```

```{r}
plot_language_map(data_list$gold, coastline, rivers, bbox_padding = 0.05)
```

## Networks

Next, we will create networks from this data, in order to be able to analyse and visualise connections.The dataset of languages is the nodelist, the edges are made on the basis of shared forms. First, the edge list is made. Fir this, we need more detailed classifications than for the maps above, so we need to read the data in again without simplifying the classifications.

```{r prepare data for network}
# read classified loan word data

# read the csv files into a list of data frames
net_data_list <- purrr::map(objs, readr::read_csv)

# Assign names
names(net_data_list) <- c("gold", "fonio", "millet", "salt", "iron")

# Function to prepare each dataset for making it into an edge list
prepare_data <- function(data) {
  data |> 
    # Step 1: Split the 'style' column into hierarchical levels
    dplyr::mutate(
      cl1 = stringr::str_extract(style, "^[A-Z]"),                    # First level
      cl2 = stringr::str_extract(style, "^[A-Z]\\.\\d+"),             # Second level
      cl3 = stringr::str_extract(style, "^[A-Z]\\.\\d+\\.\\w+")       # Third level
    ) |> 
    # Step 2: Replace "X" with NA in cl1, cl2, and cl3
    dplyr::mutate(
      cl1 = dplyr::if_else(cl1 == "X", NA_character_, cl1),
      cl2 = dplyr::if_else(cl2 == "X", NA_character_, cl2),
      cl3 = dplyr::if_else(cl3 == "X", NA_character_, cl3)
    )
}

# Apply the function to each dataset in the list
net_data_list <- lapply(net_data_list, prepare_data) 
```

```{r edge list function}
# Function to generate edge list
generate_edgelist <- function(data) {
  # Step 1: Create pairwise comparisons of glott_code values
  edgelist <- expand.grid(glott_code_1 = data$glott_code, 
                          glott_code_2 = data$glott_code,
                          stringsAsFactors = FALSE) |>
    # Remove self-loops
    dplyr::filter(glott_code_1 != glott_code_2) |>
    # Add corresponding cl1, cl2, cl3 for both nodes
    dplyr::left_join(data, by = c("glott_code_1" = "glott_code")) |>
    dplyr::rename(cl1_1 = cl1, cl2_1 = cl2, cl3_1 = cl3) |>
    dplyr::left_join(data, by = c("glott_code_2" = "glott_code")) |>
    dplyr::rename(cl1_2 = cl1, cl2_2 = cl2, cl3_2 = cl3) |>
    # Calculate weights based on equivalence
    dplyr::mutate(
      weight = dplyr::case_when(
        cl1_1 == cl1_2 & cl2_1 == cl2_2 & cl3_1 == cl3_2 ~ 3,  # Match in cl1, cl2, and cl3
        cl1_1 == cl1_2 & cl2_1 == cl2_2 ~ 2,                  # Match in cl1 and cl2
        cl1_1 == cl1_2 ~ 1,                                   # Match in cl1 only
        TRUE ~ 0                                              # No match
      )
    ) |>
    # Filter out pairs with weight = 0 (no equivalence)
    dplyr::filter(weight > 0) |>
    dplyr::select(glott_code_1, glott_code_2, weight)
  
  # Step 2: Reduce the edgelist to retain only one edge per pair with the highest weight
  reduced_edgelist <- edgelist |>
    # Ensure undirected edges by sorting the glott_code pair
    dplyr::mutate(
      node_1 = pmin(glott_code_1, glott_code_2),
      node_2 = pmax(glott_code_1, glott_code_2)
    ) |>
    # Group by the unique undirected pair
    dplyr::group_by(node_1, node_2) |>
    # Retain only the edge with the maximum weight
    dplyr::summarise(weight = max(weight), .groups = "drop") |>
    # Rename columns back to glott_code_1 and glott_code_2 for clarity
    dplyr::rename(glott_code_1 = node_1, glott_code_2 = node_2)
  
  return(reduced_edgelist)
}
```

```{r create edge lists}
edgelists <- lapply(net_data_list, generate_edgelist)
```

now, we read this into tidygraph network objects. First we take the language list and convert it into a usable edge list, and then make both into a network.

```{r}
# Convert langloc into a tibble with latitude and longitude fields
node_list <- langloc |>
  dplyr::mutate(
    latitude = sf::st_coordinates(geometry)[, 2],
    longitude = sf::st_coordinates(geometry)[, 1]
  ) |>
  tibble::as_tibble() |> 
  dplyr::select(glott_code, LanName, latitude, longitude) |> 

#add some missing values
 tibble::add_row(glott_code = "dogo1299", 
                             LanName = "Dogon", 
                             latitude = 14.43, 
                             longitude = -3.49 )
  

# Create a list of tidygraph objects using the filtered node list
graphs <- lapply(edgelists, function(edges) {
  # Filter the node list to include only nodes present in the edge list
  filtered_nodes <- node_list |>
    dplyr::filter(glott_code %in% c(edges$glott_code_1, edges$glott_code_2))
  
  # Create the tidygraph object
  tidygraph::tbl_graph(
    nodes = filtered_nodes,
    edges = edges,
    directed = FALSE
  )
})

```

```{r graph plotting functions}
# Function to plot a tidygraph object with geographic layout
plot_geo_graph <- function(graph, latitude = "latitude", longitude = "longitude", weight = "weight", label = "LanName", title = "title") {
  # Ensure that the graph has the required attributes
  if (!latitude %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
    stop(paste("Latitude column", latitude, "not found in node attributes."))
  }
  if (!longitude %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
    stop(paste("Longitude column", longitude, "not found in node attributes."))
  }
  if (!weight %in% colnames(tidygraph::as_tibble(graph, active = "edges"))) {
    stop(paste("Weight column", weight, "not found in edge attributes."))
  }
  if (!label %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
    stop(paste("Label column", label, "not found in node attributes."))
  }
  
  # Plot the tidygraph object
  ggraph::ggraph(graph, layout = "manual", x = !!rlang::sym(longitude), y = !!rlang::sym(latitude)) +
    ggraph::geom_edge_link(
      ggplot2::aes(width = !!rlang::sym(weight), alpha = !!rlang::sym(weight)), 
      color = "gray"
    ) +
    ggraph::scale_edge_alpha_continuous(range = c(0.6, 1)) + # Map weight to opacity
    ggraph::scale_edge_width_continuous(range = c(0.6, 1)) + # Map weight to width
    ggraph::geom_node_point(size = 5, color = "blue") +
    ggraph::geom_node_text(
      ggplot2::aes(label = !!rlang::sym(label)), 
      repel = TRUE, 
      size = 3, 
      color = "black"
    ) +
    ggplot2::labs(title = title) +
    ggraph::theme_graph() +
    ggplot2::theme(
      legend.position = "none"
    )
}

# Function to plot a tidygraph object with force-directed layout
plot_fr_graph <- function(graph, latitude = "latitude", longitude = "longitude", weight = "weight", label = "LanName", title = "title") {
  # Ensure that the graph has the required attributes
  if (!weight %in% colnames(tidygraph::as_tibble(graph, active = "edges"))) {
    stop(paste("Weight column", weight, "not found in edge attributes."))
  }
  if (!label %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
    stop(paste("Label column", label, "not found in node attributes."))
  }
  
  # Plot the tidygraph object
  ggraph::ggraph(graph, layout = "fr") +
    ggraph::geom_edge_link(
      ggplot2::aes(width = !!rlang::sym(weight), alpha = !!rlang::sym(weight)), 
      color = "gray"
    ) +
    ggraph::scale_edge_alpha_continuous(range = c(0.6, 1)) + # Map weight to opacity
    ggraph::scale_edge_width_continuous(range = c(0.6, 1)) + # Map weight to width
    ggraph::geom_node_point(size = 5, color = "blue") +
    ggraph::geom_node_text(
      ggplot2::aes(label = !!rlang::sym(label)), 
      repel = TRUE, 
      size = 3, 
      color = "black"
    ) +
    ggplot2::labs(title = title) +
    ggraph::theme_graph() +
    ggplot2::theme(
      legend.position = "none"
    )
}


```

### gold

```{r}
library(tidygraph) # read in tidygraph library for less typing during exploration
```

```{r}
plot_geo_graph(graphs$gold, title = "gold")
```

Improve the gold graph: remove Wolof. It has the same form as the eastern Group, but its ouro form is probably portuguese influenced, whereas the lower Niger is not. Retain only stronger ties.

```{r louvain community plot function}
plot_louvain_graph <- function(item) {
  graph <- graphs[[item]] |>
    tidygraph::mutate(louvain = tidygraph::group_louvain(weights = weight)) |>
    tidygraph::mutate(louvain = as.character(louvain)) |>
    tidygraph::activate("edges") |>
    tidygraph::filter(weight > 1) |>
    tidygraph::activate("nodes") |>
    tidygraph::filter(!tidygraph::node_is_isolated())
  
      # Function to plot a tidygraph object with geographic layout and louvain communities
    plot_comm_graph <- function(graph, latitude = "latitude", longitude = "longitude", weight = "weight",     label = "LanName", title = "title", subtitle = NULL, community = "louvain") {
      # Ensure that the graph has the required attributes
      if (!latitude %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
        stop(paste("Latitude column", latitude, "not found in node attributes."))
      }
      if (!longitude %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
        stop(paste("Longitude column", longitude, "not found in node attributes."))
      }
      if (!weight %in% colnames(tidygraph::as_tibble(graph, active = "edges"))) {
        stop(paste("Weight column", weight, "not found in edge attributes."))
      }
      if (!label %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
        stop(paste("Label column", label, "not found in node attributes."))
      }
       if (!label %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
        stop(paste("Label column", community, "not found in node attributes."))
      }
      
      # Plot the tidygraph object
      ggraph::ggraph(graph, layout = "manual", x = !!rlang::sym(longitude), y = !!rlang::sym(latitude)) +
        ggraph::geom_edge_link(
          ggplot2::aes(width = !!rlang::sym(weight), alpha = !!rlang::sym(weight)), 
          color = "gray"
        ) +
        ggraph::scale_edge_alpha_continuous(range = c(0.6, 1)) + # Map weight to opacity
        ggraph::scale_edge_width_continuous(range = c(0.6, 1)) + # Map weight to width
        ggraph::geom_node_point(ggplot2::aes(colour = !!rlang::sym(community)),size = 5) +
        ggraph::geom_node_text(
          ggplot2::aes(label = !!rlang::sym(label)), 
          repel = TRUE, 
          size = 3, 
          color = "black"
        ) +
        ggplot2::labs(title = title, subtitle = subtitle) +
        ggraph::theme_graph() +
        ggplot2::theme(
          legend.position = "none"
        )
    }
  
  plot_comm_graph(
    graph,
    community = "louvain",
    title = item,
    subtitle = "Louvain network communities"
  )
}
```

```{r}
items <- names(net_data_list)

lapply(items, plot_louvain_graph)
```

Can we sparsify using random walks or similar traversing techniques? Trade networks in economics.

### Fonio

```{r }
plot_fr_graph(graphs$fonio, title = "fonio")
```

This graph is somewhat perplexing. What does the connection between Bangime (wiÌiÌ-bÉÌ) and Igo (aÌ-wuÌbiÌ,volta-Congo langue in southern Togo) mean? This is a question that needs further answering. For now, we can remove this pair, and concentrate on the rest.

```{r}
graphs$fonio |> 
  activate(nodes) |> 
  filter(!LanName %in% c("Bangime", "Igo")) |> 
  plot_fr_graph(title = "fonio")
```

We can now see that there are outliers at either end. One is composed of a large number of Songhai variants, including Eastern Songhai Koyraboro, Humburi, and Zarma, Northern Songhai Tadaksahak, and the pastoralist languages Tuareg and Maasina Fulfulde. It is very curious that Zarma and Dendi, which are part of the same subdivision of Eastern Songhai, fall on opposite ends of this graph. We will remove both ends now to better see the centre, which appears to have three groups.

```{r}
graphs$fonio |> 
  activate(nodes) |> 
  filter(!LanName %in% c("Bangime", 
                         "Igo",
                         "Tuareg",
                         "Zarma",
                         "Tadaksahak",
                         "Koyraboro Senni Songhai",
                         "Humburi Senni Songhay",
                         "Maasina Fulfulde",
                         "Dendi (Benin)")) |> 
  plot_fr_graph(title = "fonio")
```

The resulting two groups, with a group of connecting languages between, are a geographic mess. Often, language groups fall on either end. This makes me think that more detailed analysis is necessary here. Are we picking up generics and specifics and lumping them together? There is a lot more work necessary on the vocabulary in order to make this happen. The problem is that this is not such a well-defined item as, for instance, gold is.

### Millet

```{r}
plot_fr_graph(graphs$millet, title = "millet")
```

Despite the fact that we did not note millet as a trade item, this is a super interesting graph. Let's begin with the outliers: Wan (SE MandÃ©, CdI) has an unconnected form (fen), and Dagaari Dioula

```{r}
graphs$millet |> 
  activate(nodes) |> 
  filter(!LanName %in% c("Mwan", "Toura (CÃ´te d'Ivoire)", "BaoulÃ©", "Alladian", "Dagaari Dioula", "Wan")) |> 
  plot_fr_graph(title = "millet")
```

## Finding trade routes in the networks

### Create a cost variable

This combines weight and geographic distance.

```{r}
graph <- graphs$gold

library(geosphere)

# Extract coordinates
coords <- as.data.frame(tidygraph::as_tibble(graph, active = "nodes"))

# Compute geographic distance for each edge
edge_info <- tidygraph::as_tibble(graph, active = "edges") |>
  dplyr::mutate(
    lat_from = coords$latitude[from],
    lon_from = coords$longitude[from],
    lat_to = coords$latitude[to],
    lon_to = coords$longitude[to],
    geo_dist = geosphere::distHaversine(cbind(lon_from, lat_from), cbind(lon_to, lat_to)),
    cost = geo_dist / weight
  )

# Add back to graph
graph <- tidygraph::activate(graph, "edges") |>
  dplyr::mutate(
    geo_dist = edge_info$geo_dist,
    cost = edge_info$cost
  )
```

### Via edge betweenness

Goal: Find edges that are most frequently used in shortest paths --- "key trade routes"

```{r}
graph <- graph |> 
  tidygraph::activate(edges) |> 
  tidygraph::mutate(inv_cost = ifelse(cost == 0, Inf, 1 / cost)) |> # cost variable needs to be inverted
  tidygraph::mutate(edge_betweenness = centrality_edge_betweenness(weights = inv_cost))

# Activate edges
edge_data <- tidygraph::activate(graph, "edges") |> 
  tidygraph::as_tibble()

# Summary statistics
summary(edge_data$edge_betweenness)

# Histogram
hist(edge_data$edge_betweenness, 
     breaks = 30, 
     main = "Distribution of Edge Betweenness", 
     xlab = "Edge Betweenness", 
     col = "steelblue", 
     border = "white")

```

```{r}
plot_edgecost_graph <- function(input_graph, cost, cutoff, item) {
  graph <- input_graph |>
    tidygraph::activate("nodes") |> 
    tidygraph::mutate(louvain = tidygraph::group_louvain(weights = weight)) |>
    tidygraph::mutate(louvain = as.character(louvain)) |>
    tidygraph::activate("edges") |> 
    tidygraph::filter(edge_betweenness>cutoff) |> 
    tidygraph::activate("nodes") |> 
    tidygraph::filter(!tidygraph::node_is_isolated())
  
      # Function to plot a tidygraph object with geographic layout and louvain communities
    plot_comm_graph <- function(graph, latitude = "latitude", longitude = "longitude", weight = "weight",     label = "LanName", title = "title", subtitle = NULL, community = "louvain") {
      # Ensure that the graph has the required attributes
      if (!latitude %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
        stop(paste("Latitude column", latitude, "not found in node attributes."))
      }
      if (!longitude %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
        stop(paste("Longitude column", longitude, "not found in node attributes."))
      }
      if (!weight %in% colnames(tidygraph::as_tibble(graph, active = "edges"))) {
        stop(paste("Weight column", weight, "not found in edge attributes."))
      }
      if (!label %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
        stop(paste("Label column", label, "not found in node attributes."))
      }
       if (!label %in% colnames(tidygraph::as_tibble(graph, active = "nodes"))) {
        stop(paste("Label column", community, "not found in node attributes."))
      }
      
      # Plot the tidygraph object
      ggraph::ggraph(graph, layout = "manual", x = !!rlang::sym(longitude), y = !!rlang::sym(latitude)) +
        ggraph::geom_edge_link(
          ggplot2::aes(width = !!rlang::sym(cost), alpha = !!rlang::sym(cost)), 
          color = "gray"
        ) +
        ggraph::scale_edge_alpha_continuous(range = c(0.6, 1)) + # Map weight to opacity
        ggraph::scale_edge_width_continuous(range = c(0.6, 1)) + # Map weight to width
        ggraph::geom_node_point(ggplot2::aes(colour = !!rlang::sym(community)),size = 5) +
        ggraph::geom_node_text(
          ggplot2::aes(label = !!rlang::sym(label)), 
          repel = TRUE, 
          size = 3, 
          color = "black"
        ) +
        ggplot2::labs(title = title, subtitle = subtitle) +
        ggraph::theme_graph() +
        ggplot2::theme(
          legend.position = "none"
        )
    }
  
  plot_comm_graph(
    graph,
    community = "louvain",
    title = item,
    subtitle = "Louvain network communities"
  )
}
```

```{r}


graph |> 
  activate(nodes) |> 
  filter(!LanName %in% c("Wolof", "Sereer", "Mandjak")) |> 
plot_edgecost_graph("inv_cost", 20, "gold")
```

You're dealing with a weighted, undirected trade network where edge weights likely reflect trade volume or strength of connection, and node coordinates give geographic context. To find the most important routes, you can approach this problem from multiple complementary angles, depending on your goal.

Here are several analytical strategies, ranging from classical network analysis to spatially informed metrics: ð§­ 1. Weighted Shortest Paths (Trade Efficiency)

```         
Goal: Find the most efficient trade routes considering both weight (stronger trade) and distance (shorter path).

Method:

    Create a cost function that combines weight and geographic distance. For example:

    edge_cost = distance / weight

    Then use igraph::shortest_paths() or tidygraph::distances() to find paths that minimize this cost.

Geographic distance can be calculated using the Haversine formula or geosphere::distHaversine().
```

ð 2. Edge Betweenness Centrality

```         
Goal: Find edges that are most frequently used in shortest paths â "key trade routes".

Method:

tidygraph::activate(edges) %>%
  tidygraph::mutate(edge_betweenness = centrality_edge_betweenness(weights = cost))

Youâll need a cost column (e.g., inverse of weight or distance/weight) as edge weights for the centrality calculation.
```

ð 3. Flow-Based Importance (Max Flow / Min Cut)

```         
Goal: Assess trade capacity or bottlenecks.

Method:

    Use igraph::max_flow() between key trade hubs (e.g., high-degree or central nodes).

    This identifies routes with the greatest potential trade capacity.
```

ð 4. Geographically Constrained MST (Minimum Spanning Tree)

```         
Goal: Extract a simplified network showing the most critical, efficient paths covering the entire network.

Method:

    Compute edge distances and weight them with inverse trade strength.

    Use igraph::mst() on the resulting cost-weighted graph.

This highlights low-cost, high-value trade connections.
```

ð 5. Community Bridge Edges

```         
Goal: Find routes that link otherwise separated regions.

Method:

    Run community detection (e.g., Louvain).

    Identify edges connecting nodes of different communities.

    These are often interregional trade routes.
```

ð°ï¸ 6. Geographic Visualization & Filtering

```         
Goal: Visually identify trade corridors.

Method:

    Overlay your graph on a map using ggraph + ggplot2 with geographic coordinates.

    Highlight high-weight, long-distance edges or edges with high betweenness.
```

<!-- The following line inserts a page break  -->

\newpage

# References

<!-- The following line ensures the references appear here for the MS Word or HTML output files, rather than right at the end of the document (this will not work for PDF files):  -->

::: {#refs}
:::

\newpage

### Colophon

This report was generated on `r Sys.time()` using the following computational environment and dependencies:

```{r}
#| label: colophon
#| cache: false

# which R packages and versions?
if ("devtools" %in% installed.packages()) devtools::session_info()
```

The current Git commit details are:

```{r}
# what commit is this file at? 
if ("git2r" %in% installed.packages() & git2r::in_repository(path = ".")) git2r::repository(here::here())  
```
